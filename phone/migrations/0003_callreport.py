# Generated by Django 2.0.6 on 2018-06-06 01:06

import datetime
from django.db import migrations, models


# Function to get the duration of a call in seconds
function_call_duration_in_seconds = """
CREATE OR REPLACE FUNCTION call_duration_in_seconds (timestamp with time zone, timestamp with time zone) RETURNS integer AS $$
DECLARE
    -- Parameters of the function
    start_date ALIAS FOR $1;
    end_date ALIAS FOR $2;
BEGIN
	return EXTRACT(EPOCH FROM end_date) - EXTRACT(EPOCH FROM start_date);
END;
$$
LANGUAGE plpgsql;
"""

# Function to convert the seconds to hours(HH24:MI:SS)
function_seconds_to_hours = """
CREATE OR REPLACE FUNCTION seconds_to_hours (integer) RETURNS char AS $$
DECLARE
    -- Parameters of the function
    call_duration_in_seconds ALIAS FOR $1;
BEGIN
	return TO_CHAR((call_duration_in_seconds || ' second')::interval, 'HH24:MI:SS');
END;
$$
LANGUAGE plpgsql;
"""

# Function to calculate the cost of a call
function_calculate_cost = """
CREATE OR REPLACE FUNCTION calculate_cost (integer, time) RETURNS float AS $$
DECLARE
    -- Parameters of the function
    call_duration_in_seconds ALIAS FOR $1;
    start_call ALIAS FOR $2;
    -- Constans of the function
    standard_time_call_start CONSTANT integer := EXTRACT(EPOCH FROM time '06:00:00');
    standard_time_call_end CONSTANT integer := EXTRACT(EPOCH FROM time '22:00:00');
    midnight CONSTANT integer := EXTRACT(EPOCH FROM time '24:00:00');
    standing_charge CONSTANT float := 0.36;
    charge_minute CONSTANT float := 0.09;
    day_in_seconds CONSTANT integer := 86400;
    minute_in_seconds integer := 60;
    -- Variables of the function
    start_time_in_seconds integer := EXTRACT(EPOCH FROM start_call);
    end_time_in_seconds integer := start_time_in_seconds + call_duration_in_seconds;
    start_time integer;
    end_time integer;
    cost float := 0.0;
    -- Get the rest of seconds to complete one minute.
    rest integer := minute_in_seconds - EXTRACT(second FROM start_call);
BEGIN
    -- Set the start using the standard time call
    if start_time_in_seconds < standard_time_call_start THEN
        start_time_in_seconds := standard_time_call_start;
    ELSIF start_time_in_seconds > standard_time_call_end THEN
        start_time_in_seconds := standard_time_call_end;
    END IF;

    -- Check if the call finished after the midnight
    IF end_time_in_seconds > midnight THEN
        -- Calculate the cost using only the minutes that are inside the standard time call
        call_duration_in_seconds := end_time_in_seconds - midnight + rest;
        -- Calculate the cost using only the minutes that are inside the standard time call
        cost := ((standard_time_call_end - start_time_in_seconds) / minute_in_seconds) * charge_minute;
        -- Recursion: calculate the remain cost of the phone call.
        return cost + calculate_cost(call_duration_in_seconds, '00:00:00');
    ELSEIF  end_time_in_seconds < standard_time_call_start THEN
        end_time_in_seconds := standard_time_call_start;
    ELSIF end_time_in_seconds > standard_time_call_end THEN
        end_time_in_seconds := standard_time_call_end;
    END IF;

    -- Calculate the cost using only the minutes that are inside the standard time call
    cost := ((end_time_in_seconds - start_time_in_seconds) / minute_in_seconds) * charge_minute;

    -- Return the phone call cost
    return  cost + standing_charge;
END;
$$
LANGUAGE plpgsql;
"""

report_view = """
CREATE OR REPLACE VIEW phone_callreport AS
WITH ORDERED AS
(
    SELECT
		ROW_NUMBER() OVER (ORDER BY p_start.timestamp DESC) AS rn,
		p_start.timestamp::timestamp::date AS start_date,
		p_start.timestamp::timestamp::time AS start_time,
		call_duration_in_seconds(p_start.timestamp, p_end.timestamp) AS call_duration_in_seconds,
		p_start.source AS call_source,
		p_start.destination AS call_destination
	FROM phone_callstartrecord AS p_start
		INNER JOIN phone_callendrecord AS p_end ON (p_start.call_id = p_end.call_id)
)
SELECT
  rn AS id,
  call_source,
  call_destination,
  start_date,
  start_time,
  seconds_to_hours(call_duration_in_seconds) AS call_duration,
  calculate_cost(call_duration_in_seconds, start_time) AS calculate_cost
FROM
  ORDERED;
"""

class Migration(migrations.Migration):

    dependencies = [
        ('phone', '0002_callendrecord'),
    ]

    operations = [
        migrations.CreateModel(
            name='CallReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(max_length=11)),
                ('destination', models.CharField(max_length=11)),
                ('call_start_date', models.DateField(blank=True, default=datetime.datetime.now)),
                ('call_start_time', models.TimeField()),
                ('call_duration', models.TimeField()),
                ('call_price', models.FloatField()),
            ],
            options={
                'managed': False,
                'db_table': 'phone_callreport',
            },
        ),

        migrations.RunSQL(function_call_duration_in_seconds,
                          reverse_sql='drop function call_duration_in_seconds;'),
        migrations.RunSQL(function_seconds_to_hours,
                          reverse_sql='drop function seconds_to_hours;'),
        migrations.RunSQL(function_calculate_cost,
                          reverse_sql='drop function calculate_cost;'),
        migrations.RunSQL(report_view,
                          reverse_sql='drop function phone_callreport;'),
    ]
